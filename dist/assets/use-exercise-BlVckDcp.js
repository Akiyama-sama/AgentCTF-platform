import{c as E,d as G,e as S,f as Q,g as x,h as g,i as f,j as M,k as q,l as K,m as A}from"./use-scenario-CWX--LNn.js";import{o as m,r as y}from"./index-jJ-r5mz2.js";const b=()=>{const e=m(),{data:s,...l}=E({query:{select:t=>t.data?.filter(d=>d.model_type==="exercise")??[]}}),u=G({mutation:{onSuccess:()=>{e.invalidateQueries({queryKey:M()})}}});return{exercises:s,createExercise:t=>u.mutate({data:{...t,model_type:"exercise"}}),createExerciseAsync:t=>u.mutateAsync({data:{...t,model_type:"exercise"}}),...l}},C=e=>{const s=m(),[l,u]=y.useState(!0),{data:t,...d}=S(e,{query:{enabled:!!e,select:r=>r.data??null}}),{data:a,...p}=Q(e,{query:{enabled:!!e,refetchInterval:l?5e3:!1,select:r=>r.data??null}});y.useEffect(()=>{a&&a.state!=="pending"&&a.state!=="building"&&u(!1)},[a]);const o=()=>{s.invalidateQueries({queryKey:M()}),s.invalidateQueries({queryKey:q(e)}),s.invalidateQueries({queryKey:K(e)}),s.invalidateQueries({queryKey:A(e)})},i=x({mutation:{onSuccess:o}}),c=g({mutation:{onSuccess:o}}),n=f({mutation:{onSuccess:o}});return{exercise:t,status:a,exerciseQuery:d,statusQuery:p,isUpdatingState:n.isPending,deleteExercise:i.mutate,deleteExerciseAsync:i.mutateAsync,updateExercise:c.mutate,updateExerciseAsync:c.mutateAsync,updateState:n.mutate,updateStateAsync:n.mutateAsync}};export{C as a,b as u};
