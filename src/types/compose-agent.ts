/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Compose Agent API
 * Compose Agent API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import { compose_agent_api } from '../utils/compose-agent-api';
export interface HTTPValidationError {
  detail?: ValidationError[];
}

export interface StreamRequest {
  description: string;
  model?: string;
  max_steps?: number;
}

export type ValidationErrorLocItem = string | number;

export interface ValidationError {
  loc: ValidationErrorLocItem[];
  msg: string;
  type: string;
}

export type StreamApiStreamPostParams = {
description?: string;
model?: string;
max_steps?: number;
};

export type StreamApiStreamPostBody = StreamRequest | null;

/**
 * @summary Stream
 */
export const streamApiStreamPost = (
    streamApiStreamPostBody: StreamApiStreamPostBody,
    params?: StreamApiStreamPostParams,
 signal?: AbortSignal
) => {
      
      
      return compose_agent_api<unknown>(
      {url: `/api/stream`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: streamApiStreamPostBody,
        params, signal
    },
      );
    }
  


export const getStreamApiStreamPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof streamApiStreamPost>>, TError,{data: StreamApiStreamPostBody;params?: StreamApiStreamPostParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof streamApiStreamPost>>, TError,{data: StreamApiStreamPostBody;params?: StreamApiStreamPostParams}, TContext> => {

const mutationKey = ['streamApiStreamPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof streamApiStreamPost>>, {data: StreamApiStreamPostBody;params?: StreamApiStreamPostParams}> = (props) => {
          const {data,params} = props ?? {};

          return  streamApiStreamPost(data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type StreamApiStreamPostMutationResult = NonNullable<Awaited<ReturnType<typeof streamApiStreamPost>>>
    export type StreamApiStreamPostMutationBody = StreamApiStreamPostBody
    export type StreamApiStreamPostMutationError = HTTPValidationError

    /**
 * @summary Stream
 */
export const useStreamApiStreamPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof streamApiStreamPost>>, TError,{data: StreamApiStreamPostBody;params?: StreamApiStreamPostParams}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof streamApiStreamPost>>,
        TError,
        {data: StreamApiStreamPostBody;params?: StreamApiStreamPostParams},
        TContext
      > => {

      const mutationOptions = getStreamApiStreamPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Root
 */
export const rootGet = (
    
 signal?: AbortSignal
) => {
      
      
      return compose_agent_api<unknown>(
      {url: `/`, method: 'GET', signal
    },
      );
    }
  

export const getRootGetQueryKey = () => {
    return [`/`] as const;
    }

    
export const getRootGetQueryOptions = <TData = Awaited<ReturnType<typeof rootGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof rootGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getRootGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof rootGet>>> = ({ signal }) => rootGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof rootGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type RootGetQueryResult = NonNullable<Awaited<ReturnType<typeof rootGet>>>
export type RootGetQueryError = unknown


export function useRootGet<TData = Awaited<ReturnType<typeof rootGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof rootGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof rootGet>>,
          TError,
          Awaited<ReturnType<typeof rootGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useRootGet<TData = Awaited<ReturnType<typeof rootGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof rootGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof rootGet>>,
          TError,
          Awaited<ReturnType<typeof rootGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useRootGet<TData = Awaited<ReturnType<typeof rootGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof rootGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Root
 */

export function useRootGet<TData = Awaited<ReturnType<typeof rootGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof rootGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getRootGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List Workspaces
 */
export const listWorkspacesApiWorkspacesGet = (
    
 signal?: AbortSignal
) => {
      
      
      return compose_agent_api<unknown>(
      {url: `/api/workspaces`, method: 'GET', signal
    },
      );
    }
  

export const getListWorkspacesApiWorkspacesGetQueryKey = () => {
    return [`/api/workspaces`] as const;
    }

    
export const getListWorkspacesApiWorkspacesGetQueryOptions = <TData = Awaited<ReturnType<typeof listWorkspacesApiWorkspacesGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listWorkspacesApiWorkspacesGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListWorkspacesApiWorkspacesGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof listWorkspacesApiWorkspacesGet>>> = ({ signal }) => listWorkspacesApiWorkspacesGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof listWorkspacesApiWorkspacesGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ListWorkspacesApiWorkspacesGetQueryResult = NonNullable<Awaited<ReturnType<typeof listWorkspacesApiWorkspacesGet>>>
export type ListWorkspacesApiWorkspacesGetQueryError = unknown


export function useListWorkspacesApiWorkspacesGet<TData = Awaited<ReturnType<typeof listWorkspacesApiWorkspacesGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof listWorkspacesApiWorkspacesGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listWorkspacesApiWorkspacesGet>>,
          TError,
          Awaited<ReturnType<typeof listWorkspacesApiWorkspacesGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListWorkspacesApiWorkspacesGet<TData = Awaited<ReturnType<typeof listWorkspacesApiWorkspacesGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listWorkspacesApiWorkspacesGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listWorkspacesApiWorkspacesGet>>,
          TError,
          Awaited<ReturnType<typeof listWorkspacesApiWorkspacesGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListWorkspacesApiWorkspacesGet<TData = Awaited<ReturnType<typeof listWorkspacesApiWorkspacesGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listWorkspacesApiWorkspacesGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List Workspaces
 */

export function useListWorkspacesApiWorkspacesGet<TData = Awaited<ReturnType<typeof listWorkspacesApiWorkspacesGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listWorkspacesApiWorkspacesGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getListWorkspacesApiWorkspacesGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get Workspace
 */
export const getWorkspaceApiWorkspacesNameGet = (
    name: string,
 signal?: AbortSignal
) => {
      
      
      return compose_agent_api<unknown>(
      {url: `/api/workspaces/${name}`, method: 'GET', signal
    },
      );
    }
  

export const getGetWorkspaceApiWorkspacesNameGetQueryKey = (name: string,) => {
    return [`/api/workspaces/${name}`] as const;
    }

    
export const getGetWorkspaceApiWorkspacesNameGetQueryOptions = <TData = Awaited<ReturnType<typeof getWorkspaceApiWorkspacesNameGet>>, TError = HTTPValidationError>(name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkspaceApiWorkspacesNameGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetWorkspaceApiWorkspacesNameGetQueryKey(name);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getWorkspaceApiWorkspacesNameGet>>> = ({ signal }) => getWorkspaceApiWorkspacesNameGet(name, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(name), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getWorkspaceApiWorkspacesNameGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetWorkspaceApiWorkspacesNameGetQueryResult = NonNullable<Awaited<ReturnType<typeof getWorkspaceApiWorkspacesNameGet>>>
export type GetWorkspaceApiWorkspacesNameGetQueryError = HTTPValidationError


export function useGetWorkspaceApiWorkspacesNameGet<TData = Awaited<ReturnType<typeof getWorkspaceApiWorkspacesNameGet>>, TError = HTTPValidationError>(
 name: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkspaceApiWorkspacesNameGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWorkspaceApiWorkspacesNameGet>>,
          TError,
          Awaited<ReturnType<typeof getWorkspaceApiWorkspacesNameGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetWorkspaceApiWorkspacesNameGet<TData = Awaited<ReturnType<typeof getWorkspaceApiWorkspacesNameGet>>, TError = HTTPValidationError>(
 name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkspaceApiWorkspacesNameGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWorkspaceApiWorkspacesNameGet>>,
          TError,
          Awaited<ReturnType<typeof getWorkspaceApiWorkspacesNameGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetWorkspaceApiWorkspacesNameGet<TData = Awaited<ReturnType<typeof getWorkspaceApiWorkspacesNameGet>>, TError = HTTPValidationError>(
 name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkspaceApiWorkspacesNameGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Workspace
 */

export function useGetWorkspaceApiWorkspacesNameGet<TData = Awaited<ReturnType<typeof getWorkspaceApiWorkspacesNameGet>>, TError = HTTPValidationError>(
 name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkspaceApiWorkspacesNameGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetWorkspaceApiWorkspacesNameGetQueryOptions(name,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Delete Workspace
 */
export const deleteWorkspaceApiWorkspacesNameDelete = (
    name: string,
 ) => {
      
      
      return compose_agent_api<unknown>(
      {url: `/api/workspaces/${name}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteWorkspaceApiWorkspacesNameDeleteMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteWorkspaceApiWorkspacesNameDelete>>, TError,{name: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteWorkspaceApiWorkspacesNameDelete>>, TError,{name: string}, TContext> => {

const mutationKey = ['deleteWorkspaceApiWorkspacesNameDelete'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteWorkspaceApiWorkspacesNameDelete>>, {name: string}> = (props) => {
          const {name} = props ?? {};

          return  deleteWorkspaceApiWorkspacesNameDelete(name,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteWorkspaceApiWorkspacesNameDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof deleteWorkspaceApiWorkspacesNameDelete>>>
    
    export type DeleteWorkspaceApiWorkspacesNameDeleteMutationError = HTTPValidationError

    /**
 * @summary Delete Workspace
 */
export const useDeleteWorkspaceApiWorkspacesNameDelete = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteWorkspaceApiWorkspacesNameDelete>>, TError,{name: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteWorkspaceApiWorkspacesNameDelete>>,
        TError,
        {name: string},
        TContext
      > => {

      const mutationOptions = getDeleteWorkspaceApiWorkspacesNameDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Download Workspace
 */
export const downloadWorkspaceApiWorkspacesNameDownloadGet = (
    name: string,
 signal?: AbortSignal
) => {
      
      
      return compose_agent_api<unknown>(
      {url: `/api/workspaces/${name}/download`, method: 'GET', signal
    },
      );
    }
  

export const getDownloadWorkspaceApiWorkspacesNameDownloadGetQueryKey = (name: string,) => {
    return [`/api/workspaces/${name}/download`] as const;
    }

    
export const getDownloadWorkspaceApiWorkspacesNameDownloadGetQueryOptions = <TData = Awaited<ReturnType<typeof downloadWorkspaceApiWorkspacesNameDownloadGet>>, TError = HTTPValidationError>(name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof downloadWorkspaceApiWorkspacesNameDownloadGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDownloadWorkspaceApiWorkspacesNameDownloadGetQueryKey(name);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof downloadWorkspaceApiWorkspacesNameDownloadGet>>> = ({ signal }) => downloadWorkspaceApiWorkspacesNameDownloadGet(name, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(name), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof downloadWorkspaceApiWorkspacesNameDownloadGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type DownloadWorkspaceApiWorkspacesNameDownloadGetQueryResult = NonNullable<Awaited<ReturnType<typeof downloadWorkspaceApiWorkspacesNameDownloadGet>>>
export type DownloadWorkspaceApiWorkspacesNameDownloadGetQueryError = HTTPValidationError


export function useDownloadWorkspaceApiWorkspacesNameDownloadGet<TData = Awaited<ReturnType<typeof downloadWorkspaceApiWorkspacesNameDownloadGet>>, TError = HTTPValidationError>(
 name: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof downloadWorkspaceApiWorkspacesNameDownloadGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof downloadWorkspaceApiWorkspacesNameDownloadGet>>,
          TError,
          Awaited<ReturnType<typeof downloadWorkspaceApiWorkspacesNameDownloadGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDownloadWorkspaceApiWorkspacesNameDownloadGet<TData = Awaited<ReturnType<typeof downloadWorkspaceApiWorkspacesNameDownloadGet>>, TError = HTTPValidationError>(
 name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof downloadWorkspaceApiWorkspacesNameDownloadGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof downloadWorkspaceApiWorkspacesNameDownloadGet>>,
          TError,
          Awaited<ReturnType<typeof downloadWorkspaceApiWorkspacesNameDownloadGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDownloadWorkspaceApiWorkspacesNameDownloadGet<TData = Awaited<ReturnType<typeof downloadWorkspaceApiWorkspacesNameDownloadGet>>, TError = HTTPValidationError>(
 name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof downloadWorkspaceApiWorkspacesNameDownloadGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Download Workspace
 */

export function useDownloadWorkspaceApiWorkspacesNameDownloadGet<TData = Awaited<ReturnType<typeof downloadWorkspaceApiWorkspacesNameDownloadGet>>, TError = HTTPValidationError>(
 name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof downloadWorkspaceApiWorkspacesNameDownloadGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getDownloadWorkspaceApiWorkspacesNameDownloadGetQueryOptions(name,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}
