/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * AI Agent驱动的动态攻防推演靶场平台 API
 * 自动化演练评估平台 - 第四部分 API 接口
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import { automated_assessment_api } from '../utils/automated-assessment-api';
export interface BodyAnalyzeAndStoreApiAssessmentAnalyzePost {
  /** 模型ID */
  Model_id: string;
  /** 流量包路径列表 */
  pcap_paths: string[];
}

export interface HTTPValidationError {
  detail?: ValidationError[];
}

export type ValidationErrorLocItem = string | number;

export interface ValidationError {
  loc: ValidationErrorLocItem[];
  msg: string;
  type: string;
}

/**
 * 获取指定模型的评估状态
 * @summary Get Assessment Status
 */
export const getAssessmentStatusApiAssessmentStatusModelIdGet = (
    modelId: string,
 signal?: AbortSignal
) => {
      
      
      return automated_assessment_api<unknown>(
      {url: `/api/assessment/status/${modelId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetAssessmentStatusApiAssessmentStatusModelIdGetQueryKey = (modelId: string,) => {
    return [`/api/assessment/status/${modelId}`] as const;
    }

    
export const getGetAssessmentStatusApiAssessmentStatusModelIdGetQueryOptions = <TData = Awaited<ReturnType<typeof getAssessmentStatusApiAssessmentStatusModelIdGet>>, TError = HTTPValidationError>(modelId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssessmentStatusApiAssessmentStatusModelIdGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAssessmentStatusApiAssessmentStatusModelIdGetQueryKey(modelId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAssessmentStatusApiAssessmentStatusModelIdGet>>> = ({ signal }) => getAssessmentStatusApiAssessmentStatusModelIdGet(modelId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(modelId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAssessmentStatusApiAssessmentStatusModelIdGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAssessmentStatusApiAssessmentStatusModelIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof getAssessmentStatusApiAssessmentStatusModelIdGet>>>
export type GetAssessmentStatusApiAssessmentStatusModelIdGetQueryError = HTTPValidationError


export function useGetAssessmentStatusApiAssessmentStatusModelIdGet<TData = Awaited<ReturnType<typeof getAssessmentStatusApiAssessmentStatusModelIdGet>>, TError = HTTPValidationError>(
 modelId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssessmentStatusApiAssessmentStatusModelIdGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAssessmentStatusApiAssessmentStatusModelIdGet>>,
          TError,
          Awaited<ReturnType<typeof getAssessmentStatusApiAssessmentStatusModelIdGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAssessmentStatusApiAssessmentStatusModelIdGet<TData = Awaited<ReturnType<typeof getAssessmentStatusApiAssessmentStatusModelIdGet>>, TError = HTTPValidationError>(
 modelId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssessmentStatusApiAssessmentStatusModelIdGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAssessmentStatusApiAssessmentStatusModelIdGet>>,
          TError,
          Awaited<ReturnType<typeof getAssessmentStatusApiAssessmentStatusModelIdGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAssessmentStatusApiAssessmentStatusModelIdGet<TData = Awaited<ReturnType<typeof getAssessmentStatusApiAssessmentStatusModelIdGet>>, TError = HTTPValidationError>(
 modelId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssessmentStatusApiAssessmentStatusModelIdGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Assessment Status
 */

export function useGetAssessmentStatusApiAssessmentStatusModelIdGet<TData = Awaited<ReturnType<typeof getAssessmentStatusApiAssessmentStatusModelIdGet>>, TError = HTTPValidationError>(
 modelId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssessmentStatusApiAssessmentStatusModelIdGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAssessmentStatusApiAssessmentStatusModelIdGetQueryOptions(modelId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * 获取指定模型的评估报告
 * @summary Get Assessment Report
 */
export const getAssessmentReportApiAssessmentReportModelIdGet = (
    modelId: string,
 signal?: AbortSignal
) => {
      
      
      return automated_assessment_api<unknown>(
      {url: `/api/assessment/report/${modelId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetAssessmentReportApiAssessmentReportModelIdGetQueryKey = (modelId: string,) => {
    return [`/api/assessment/report/${modelId}`] as const;
    }

    
export const getGetAssessmentReportApiAssessmentReportModelIdGetQueryOptions = <TData = Awaited<ReturnType<typeof getAssessmentReportApiAssessmentReportModelIdGet>>, TError = HTTPValidationError>(modelId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssessmentReportApiAssessmentReportModelIdGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAssessmentReportApiAssessmentReportModelIdGetQueryKey(modelId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAssessmentReportApiAssessmentReportModelIdGet>>> = ({ signal }) => getAssessmentReportApiAssessmentReportModelIdGet(modelId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(modelId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAssessmentReportApiAssessmentReportModelIdGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAssessmentReportApiAssessmentReportModelIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof getAssessmentReportApiAssessmentReportModelIdGet>>>
export type GetAssessmentReportApiAssessmentReportModelIdGetQueryError = HTTPValidationError


export function useGetAssessmentReportApiAssessmentReportModelIdGet<TData = Awaited<ReturnType<typeof getAssessmentReportApiAssessmentReportModelIdGet>>, TError = HTTPValidationError>(
 modelId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssessmentReportApiAssessmentReportModelIdGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAssessmentReportApiAssessmentReportModelIdGet>>,
          TError,
          Awaited<ReturnType<typeof getAssessmentReportApiAssessmentReportModelIdGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAssessmentReportApiAssessmentReportModelIdGet<TData = Awaited<ReturnType<typeof getAssessmentReportApiAssessmentReportModelIdGet>>, TError = HTTPValidationError>(
 modelId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssessmentReportApiAssessmentReportModelIdGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAssessmentReportApiAssessmentReportModelIdGet>>,
          TError,
          Awaited<ReturnType<typeof getAssessmentReportApiAssessmentReportModelIdGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAssessmentReportApiAssessmentReportModelIdGet<TData = Awaited<ReturnType<typeof getAssessmentReportApiAssessmentReportModelIdGet>>, TError = HTTPValidationError>(
 modelId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssessmentReportApiAssessmentReportModelIdGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Assessment Report
 */

export function useGetAssessmentReportApiAssessmentReportModelIdGet<TData = Awaited<ReturnType<typeof getAssessmentReportApiAssessmentReportModelIdGet>>, TError = HTTPValidationError>(
 modelId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssessmentReportApiAssessmentReportModelIdGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAssessmentReportApiAssessmentReportModelIdGetQueryOptions(modelId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * 接收Model_id和流量包路径，自动分析流量包，生成评估报告，并与Model_id一起存入数据库。
 * @summary Analyze And Store
 */
export const analyzeAndStoreApiAssessmentAnalyzePost = (
    bodyAnalyzeAndStoreApiAssessmentAnalyzePost: BodyAnalyzeAndStoreApiAssessmentAnalyzePost,
 signal?: AbortSignal
) => {
      
      
      return automated_assessment_api<unknown>(
      {url: `/api/assessment/analyze`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: bodyAnalyzeAndStoreApiAssessmentAnalyzePost, signal
    },
      );
    }
  


export const getAnalyzeAndStoreApiAssessmentAnalyzePostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof analyzeAndStoreApiAssessmentAnalyzePost>>, TError,{data: BodyAnalyzeAndStoreApiAssessmentAnalyzePost}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof analyzeAndStoreApiAssessmentAnalyzePost>>, TError,{data: BodyAnalyzeAndStoreApiAssessmentAnalyzePost}, TContext> => {

const mutationKey = ['analyzeAndStoreApiAssessmentAnalyzePost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof analyzeAndStoreApiAssessmentAnalyzePost>>, {data: BodyAnalyzeAndStoreApiAssessmentAnalyzePost}> = (props) => {
          const {data} = props ?? {};

          return  analyzeAndStoreApiAssessmentAnalyzePost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AnalyzeAndStoreApiAssessmentAnalyzePostMutationResult = NonNullable<Awaited<ReturnType<typeof analyzeAndStoreApiAssessmentAnalyzePost>>>
    export type AnalyzeAndStoreApiAssessmentAnalyzePostMutationBody = BodyAnalyzeAndStoreApiAssessmentAnalyzePost
    export type AnalyzeAndStoreApiAssessmentAnalyzePostMutationError = HTTPValidationError

    /**
 * @summary Analyze And Store
 */
export const useAnalyzeAndStoreApiAssessmentAnalyzePost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof analyzeAndStoreApiAssessmentAnalyzePost>>, TError,{data: BodyAnalyzeAndStoreApiAssessmentAnalyzePost}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof analyzeAndStoreApiAssessmentAnalyzePost>>,
        TError,
        {data: BodyAnalyzeAndStoreApiAssessmentAnalyzePost},
        TContext
      > => {

      const mutationOptions = getAnalyzeAndStoreApiAssessmentAnalyzePostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
