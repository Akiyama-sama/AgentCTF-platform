/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Defender Agent API
 * 网络安全防御代理API
 * OpenAPI spec version: 2.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import { defender_agent_api } from '../utils/defender-agent-api';
/**
 * 响应数据
 */
export type ApiResponseDefenseReportResponseData = DefenseReportResponse | null;

export interface ApiResponseDefenseReportResponse {
  /** 业务状态码，非HTTP状态码 */
  code?: number;
  /** 响应消息 */
  message?: string;
  /** 响应数据 */
  data?: ApiResponseDefenseReportResponseData;
}

/**
 * 响应数据
 */
export type ApiResponseInstanceCleanupResponseData = InstanceCleanupResponse | null;

export interface ApiResponseInstanceCleanupResponse {
  /** 业务状态码，非HTTP状态码 */
  code?: number;
  /** 响应消息 */
  message?: string;
  /** 响应数据 */
  data?: ApiResponseInstanceCleanupResponseData;
}

/**
 * 响应数据
 */
export type ApiResponseInstanceInitResponseData = InstanceInitResponse | null;

export interface ApiResponseInstanceInitResponse {
  /** 业务状态码，非HTTP状态码 */
  code?: number;
  /** 响应消息 */
  message?: string;
  /** 响应数据 */
  data?: ApiResponseInstanceInitResponseData;
}

/**
 * 响应数据
 */
export type ApiResponseInstanceStatusResponseData = InstanceStatusResponse | null;

export interface ApiResponseInstanceStatusResponse {
  /** 业务状态码，非HTTP状态码 */
  code?: number;
  /** 响应消息 */
  message?: string;
  /** 响应数据 */
  data?: ApiResponseInstanceStatusResponseData;
}

/**
 * 攻击链分析
 */
export interface AttackChainAnalysis {
  /** 攻击阶段列表 */
  attack_stages: string[];
  /** 攻击路径描述 */
  attack_path: string;
  /** 攻击技术列表 */
  attack_techniques: string[];
}

/**
 * 攻击类型
 */
export interface AttackType {
  /** 攻击类型描述 */
  description: string;
  /** 攻击示例列表 */
  examples: string[];
}

/**
 * 溯源结论摘要
 */
export interface AttributionSummary {
  /** 攻击者归属 */
  attacker_attribution: string;
  /** 攻击动机 */
  attack_motivation: string;
  /** 攻击影响 */
  attack_impact: string;
  /** 溯源置信度 */
  attribution_confidence: string;
  /** 溯源推理过程 */
  attribution_reasoning: string;
}

export interface DefenseReportRequest {
  /** 防御代理实例ID */
  model_id: string;
}

/**
 * 文件大小(字节)
 */
export type DefenseReportResponseFileSize = number | null;

/**
 * 文件最后修改时间
 */
export type DefenseReportResponseLastModified = string | null;

export interface DefenseReportResponse {
  /** 防御代理实例ID */
  model_id: string;
  /** 报告文件路径 */
  report_file: string;
  /** 报告数据 */
  report_data: DefenseReportSchema;
  /** 获取时间 */
  timestamp: string;
  /** 文件大小(字节) */
  file_size?: DefenseReportResponseFileSize;
  /** 文件最后修改时间 */
  last_modified?: DefenseReportResponseLastModified;
}

/**
 * 执行摘要
 */
export type DefenseReportSchemaExecutiveSummary = ExecutiveSummary | string | null;

/**
 * 威胁统计
 */
export type DefenseReportSchemaThreatStatistics = ThreatStatistics | string | null;

export type DefenseReportSchemaAttackTypesAnyOf = {[key: string]: AttackType};

/**
 * 攻击类型分析
 */
export type DefenseReportSchemaAttackTypes = DefenseReportSchemaAttackTypesAnyOf | string | null;

/**
 * 威胁阻断分析
 */
export type DefenseReportSchemaThreatBlockingAnalysis = ThreatBlockingAnalysis | string | null;

/**
 * 漏洞修复分析
 */
export type DefenseReportSchemaVulnerabilityRemediationAnalysis = VulnerabilityRemediationAnalysis | string | null;

/**
 * 溯源结论摘要
 */
export type DefenseReportSchemaAttributionSummary = AttributionSummary | string | null;

/**
 * 攻击链分析
 */
export type DefenseReportSchemaAttackChainAnalysis = AttackChainAnalysis | string | null;

/**
 * 响应效果评估
 */
export type DefenseReportSchemaResponseEffectiveness = ResponseEffectiveness | string | null;

/**
 * 应急响应预案
 */
export type DefenseReportSchemaEmergencyResponsePlan = EmergencyResponsePlan | string | null;

/**
 * 安全改进建议
 */
export type DefenseReportSchemaSecurityRecommendations = SecurityRecommendations | string | null;

/**
 * 风险评估
 */
export type DefenseReportSchemaRiskAssessment = RiskAssessment | string | null;

/**
 * 后续行动建议
 */
export type DefenseReportSchemaNextSteps = NextSteps | string | null;

/**
 * 防御报告完整结构 - 适配AI生成的格式
 */
export interface DefenseReportSchema {
  /** 执行摘要 */
  executive_summary?: DefenseReportSchemaExecutiveSummary;
  /** 威胁统计 */
  threat_statistics?: DefenseReportSchemaThreatStatistics;
  /** 攻击类型分析 */
  attack_types?: DefenseReportSchemaAttackTypes;
  /** 威胁阻断分析 */
  threat_blocking_analysis?: DefenseReportSchemaThreatBlockingAnalysis;
  /** 漏洞修复分析 */
  vulnerability_remediation_analysis?: DefenseReportSchemaVulnerabilityRemediationAnalysis;
  /** 溯源结论摘要 */
  attribution_summary?: DefenseReportSchemaAttributionSummary;
  /** 攻击链分析 */
  attack_chain_analysis?: DefenseReportSchemaAttackChainAnalysis;
  /** 响应效果评估 */
  response_effectiveness?: DefenseReportSchemaResponseEffectiveness;
  /** 应急响应预案 */
  emergency_response_plan?: DefenseReportSchemaEmergencyResponsePlan;
  /** 安全改进建议 */
  security_recommendations?: DefenseReportSchemaSecurityRecommendations;
  /** 风险评估 */
  risk_assessment?: DefenseReportSchemaRiskAssessment;
  /** 后续行动建议 */
  next_steps?: DefenseReportSchemaNextSteps;
}

/**
 * 应急响应预案
 */
export interface EmergencyResponsePlan {
  /** 立即行动列表 */
  immediate_actions: string[];
  /** 短期措施列表 */
  short_term_measures: string[];
  /** 长期改进列表 */
  long_term_improvements: string[];
  /** 人员分工列表 */
  personnel_assignments: string[];
  /** 沟通机制列表 */
  communication_mechanisms: string[];
}

/**
 * 执行摘要
 */
export interface ExecutiveSummary {
  /** 威胁概况描述 */
  threat_overview: string;
  /** 主要发现列表 */
  main_findings: string[];
}

export interface HTTPValidationError {
  detail?: ValidationError[];
}

export interface InstanceCleanupResponse {
  /** 防御代理实例ID */
  model_id: string;
  /** 清理状态 */
  status: string;
  /** 清理时间 */
  cleaned_at: string;
}

/**
 * 实例配置信息
 */
export interface InstanceConfig {
  /** 模型名称 */
  model_name: string;
  /** 会话ID */
  session_id: string;
  /** 日志级别 */
  log_level: string;
  /** 最大连接数 */
  max_connections: number;
  /** 超时时间(秒) */
  timeout: number;
}

export interface InstanceInitRequest {
  /** 防御代理实例ID */
  model_id: string;
}

export interface InstanceInitResponse {
  /** 防御代理实例ID */
  model_id: string;
  /** 实例状态 */
  status: string;
  /** 创建时间 */
  created_at: string;
}

/**
 * 最后活动时间
 */
export type InstanceStatusResponseLastActivity = string | null;

/**
 * 配置信息
 */
export type InstanceStatusResponseConfigInfo = InstanceConfig | null;

export interface InstanceStatusResponse {
  /** 防御代理实例ID */
  model_id: string;
  /** 是否已初始化 */
  initialized: boolean;
  /** 最后活动时间 */
  last_activity?: InstanceStatusResponseLastActivity;
  /** 配置信息 */
  config_info?: InstanceStatusResponseConfigInfo;
}

export interface LogStreamRequest {
  /** 防御代理实例ID */
  model_id: string;
}

/**
 * 后续行动建议
 */
export interface NextSteps {
  /** 行动步骤列表 */
  steps: string[];
}

/**
 * 响应效果评估
 */
export interface ResponseEffectiveness {
  /** 效果评级 */
  effectiveness: string;
  /** 详细说明 */
  details: string;
}

/**
 * 风险评估
 */
export interface RiskAssessment {
  /** 风险等级 */
  risk_level: string;
  /** 风险详情 */
  details: string;
}

/**
 * 安全改进建议
 */
export interface SecurityRecommendations {
  /** 建议列表 */
  recommendations: string[];
}

/**
 * 威胁阻断分析
 */
export interface ThreatBlockingAnalysis {
  /** 阻断的IP列表 */
  blocked_ips: string[];
  /** 阻断的端口列表 */
  blocked_ports: string[];
  /** 防火墙规则列表 */
  firewall_rules: string[];
  /** 阻断效果评估 */
  blocking_effectiveness: string;
}

/**
 * 按类型分布
 */
export type ThreatStatisticsTypeDistribution = {[key: string]: number};

/**
 * 按严重程度分布
 */
export type ThreatStatisticsSeverityDistribution = {[key: string]: number};

/**
 * 威胁统计
 */
export interface ThreatStatistics {
  /** 总威胁数 */
  total_threats: number;
  /** 按类型分布 */
  type_distribution: ThreatStatisticsTypeDistribution;
  /** 按严重程度分布 */
  severity_distribution: ThreatStatisticsSeverityDistribution;
}

export type ValidationErrorLocItem = string | number;

export interface ValidationError {
  loc: ValidationErrorLocItem[];
  msg: string;
  type: string;
}

/**
 * 漏洞修复分析
 */
export interface VulnerabilityRemediationAnalysis {
  /** 重启的服务列表 */
  restarted_services: string[];
  /** Web配置修改列表 */
  web_config_changes: string[];
  /** 应用的补丁列表 */
  applied_patches: string[];
  /** 修复成功率 */
  remediation_success_rate: string;
  /** 修复动作列表 */
  remediation_actions: string[];
}

export type StreamLogsApiLogsStreamPost404 = {
  code?: number;
  message?: string;
  data?: null;
};

export type StreamLogsApiLogsStreamPost500 = {
  code?: number;
  message?: string;
  data?: null;
};

/**
 * 使用SSE协议流式获取指定model_id的系统日志，支持标准事件类型：start、ping、message、end、error
 * @summary 获取日志流式传输
 */
export const streamLogsApiLogsStreamPost = (
    logStreamRequest: LogStreamRequest,
 signal?: AbortSignal
) => {
      
      
      return defender_agent_api<unknown>(
      {url: `/api/logs/stream`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: logStreamRequest, signal
    },
      );
    }
  


export const getStreamLogsApiLogsStreamPostMutationOptions = <TError = StreamLogsApiLogsStreamPost404 | HTTPValidationError | StreamLogsApiLogsStreamPost500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof streamLogsApiLogsStreamPost>>, TError,{data: LogStreamRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof streamLogsApiLogsStreamPost>>, TError,{data: LogStreamRequest}, TContext> => {

const mutationKey = ['streamLogsApiLogsStreamPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof streamLogsApiLogsStreamPost>>, {data: LogStreamRequest}> = (props) => {
          const {data} = props ?? {};

          return  streamLogsApiLogsStreamPost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type StreamLogsApiLogsStreamPostMutationResult = NonNullable<Awaited<ReturnType<typeof streamLogsApiLogsStreamPost>>>
    export type StreamLogsApiLogsStreamPostMutationBody = LogStreamRequest
    export type StreamLogsApiLogsStreamPostMutationError = StreamLogsApiLogsStreamPost404 | HTTPValidationError | StreamLogsApiLogsStreamPost500

    /**
 * @summary 获取日志流式传输
 */
export const useStreamLogsApiLogsStreamPost = <TError = StreamLogsApiLogsStreamPost404 | HTTPValidationError | StreamLogsApiLogsStreamPost500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof streamLogsApiLogsStreamPost>>, TError,{data: LogStreamRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof streamLogsApiLogsStreamPost>>,
        TError,
        {data: LogStreamRequest},
        TContext
      > => {

      const mutationOptions = getStreamLogsApiLogsStreamPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * 获取指定防御代理实例的防御报告内容，包含详细的JSON元数据结构
 * @summary 获取指定model_id的防御报告
 */
export const getDefenseReportApiDefenseReportGetPost = (
    defenseReportRequest: DefenseReportRequest,
 signal?: AbortSignal
) => {
      
      
      return defender_agent_api<ApiResponseDefenseReportResponse>(
      {url: `/api/defense-report/get`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: defenseReportRequest, signal
    },
      );
    }
  


export const getGetDefenseReportApiDefenseReportGetPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getDefenseReportApiDefenseReportGetPost>>, TError,{data: DefenseReportRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof getDefenseReportApiDefenseReportGetPost>>, TError,{data: DefenseReportRequest}, TContext> => {

const mutationKey = ['getDefenseReportApiDefenseReportGetPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof getDefenseReportApiDefenseReportGetPost>>, {data: DefenseReportRequest}> = (props) => {
          const {data} = props ?? {};

          return  getDefenseReportApiDefenseReportGetPost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type GetDefenseReportApiDefenseReportGetPostMutationResult = NonNullable<Awaited<ReturnType<typeof getDefenseReportApiDefenseReportGetPost>>>
    export type GetDefenseReportApiDefenseReportGetPostMutationBody = DefenseReportRequest
    export type GetDefenseReportApiDefenseReportGetPostMutationError = HTTPValidationError

    /**
 * @summary 获取指定model_id的防御报告
 */
export const useGetDefenseReportApiDefenseReportGetPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getDefenseReportApiDefenseReportGetPost>>, TError,{data: DefenseReportRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof getDefenseReportApiDefenseReportGetPost>>,
        TError,
        {data: DefenseReportRequest},
        TContext
      > => {

      const mutationOptions = getGetDefenseReportApiDefenseReportGetPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * 创建并初始化指定model_id的防御代理实例
 * @summary 初始化防御代理实例
 */
export const initDefenderInstanceApiInstanceInitPost = (
    instanceInitRequest: InstanceInitRequest,
 signal?: AbortSignal
) => {
      
      
      return defender_agent_api<ApiResponseInstanceInitResponse>(
      {url: `/api/instance/init`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: instanceInitRequest, signal
    },
      );
    }
  


export const getInitDefenderInstanceApiInstanceInitPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof initDefenderInstanceApiInstanceInitPost>>, TError,{data: InstanceInitRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof initDefenderInstanceApiInstanceInitPost>>, TError,{data: InstanceInitRequest}, TContext> => {

const mutationKey = ['initDefenderInstanceApiInstanceInitPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof initDefenderInstanceApiInstanceInitPost>>, {data: InstanceInitRequest}> = (props) => {
          const {data} = props ?? {};

          return  initDefenderInstanceApiInstanceInitPost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type InitDefenderInstanceApiInstanceInitPostMutationResult = NonNullable<Awaited<ReturnType<typeof initDefenderInstanceApiInstanceInitPost>>>
    export type InitDefenderInstanceApiInstanceInitPostMutationBody = InstanceInitRequest
    export type InitDefenderInstanceApiInstanceInitPostMutationError = HTTPValidationError

    /**
 * @summary 初始化防御代理实例
 */
export const useInitDefenderInstanceApiInstanceInitPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof initDefenderInstanceApiInstanceInitPost>>, TError,{data: InstanceInitRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof initDefenderInstanceApiInstanceInitPost>>,
        TError,
        {data: InstanceInitRequest},
        TContext
      > => {

      const mutationOptions = getInitDefenderInstanceApiInstanceInitPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * 获取指定model_id的防御代理实例当前状态信息
 * @summary 获取防御代理实例状态
 */
export const getInstanceStatusApiInstanceStatusModelIdGet = (
    modelId: string,
 signal?: AbortSignal
) => {
      
      
      return defender_agent_api<ApiResponseInstanceStatusResponse>(
      {url: `/api/instance/status/${modelId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetInstanceStatusApiInstanceStatusModelIdGetQueryKey = (modelId: string,) => {
    return [`/api/instance/status/${modelId}`] as const;
    }

    
export const getGetInstanceStatusApiInstanceStatusModelIdGetQueryOptions = <TData = Awaited<ReturnType<typeof getInstanceStatusApiInstanceStatusModelIdGet>>, TError = HTTPValidationError>(modelId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInstanceStatusApiInstanceStatusModelIdGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetInstanceStatusApiInstanceStatusModelIdGetQueryKey(modelId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getInstanceStatusApiInstanceStatusModelIdGet>>> = ({ signal }) => getInstanceStatusApiInstanceStatusModelIdGet(modelId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(modelId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getInstanceStatusApiInstanceStatusModelIdGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetInstanceStatusApiInstanceStatusModelIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof getInstanceStatusApiInstanceStatusModelIdGet>>>
export type GetInstanceStatusApiInstanceStatusModelIdGetQueryError = HTTPValidationError


export function useGetInstanceStatusApiInstanceStatusModelIdGet<TData = Awaited<ReturnType<typeof getInstanceStatusApiInstanceStatusModelIdGet>>, TError = HTTPValidationError>(
 modelId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInstanceStatusApiInstanceStatusModelIdGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getInstanceStatusApiInstanceStatusModelIdGet>>,
          TError,
          Awaited<ReturnType<typeof getInstanceStatusApiInstanceStatusModelIdGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetInstanceStatusApiInstanceStatusModelIdGet<TData = Awaited<ReturnType<typeof getInstanceStatusApiInstanceStatusModelIdGet>>, TError = HTTPValidationError>(
 modelId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInstanceStatusApiInstanceStatusModelIdGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getInstanceStatusApiInstanceStatusModelIdGet>>,
          TError,
          Awaited<ReturnType<typeof getInstanceStatusApiInstanceStatusModelIdGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetInstanceStatusApiInstanceStatusModelIdGet<TData = Awaited<ReturnType<typeof getInstanceStatusApiInstanceStatusModelIdGet>>, TError = HTTPValidationError>(
 modelId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInstanceStatusApiInstanceStatusModelIdGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary 获取防御代理实例状态
 */

export function useGetInstanceStatusApiInstanceStatusModelIdGet<TData = Awaited<ReturnType<typeof getInstanceStatusApiInstanceStatusModelIdGet>>, TError = HTTPValidationError>(
 modelId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInstanceStatusApiInstanceStatusModelIdGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetInstanceStatusApiInstanceStatusModelIdGetQueryOptions(modelId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * 清理并释放指定model_id的防御代理实例资源
 * @summary 清理防御代理实例
 */
export const cleanupDefenderInstanceApiInstanceCleanupModelIdDelete = (
    modelId: string,
 ) => {
      
      
      return defender_agent_api<ApiResponseInstanceCleanupResponse>(
      {url: `/api/instance/cleanup/${modelId}`, method: 'DELETE'
    },
      );
    }
  


export const getCleanupDefenderInstanceApiInstanceCleanupModelIdDeleteMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof cleanupDefenderInstanceApiInstanceCleanupModelIdDelete>>, TError,{modelId: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof cleanupDefenderInstanceApiInstanceCleanupModelIdDelete>>, TError,{modelId: string}, TContext> => {

const mutationKey = ['cleanupDefenderInstanceApiInstanceCleanupModelIdDelete'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof cleanupDefenderInstanceApiInstanceCleanupModelIdDelete>>, {modelId: string}> = (props) => {
          const {modelId} = props ?? {};

          return  cleanupDefenderInstanceApiInstanceCleanupModelIdDelete(modelId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CleanupDefenderInstanceApiInstanceCleanupModelIdDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof cleanupDefenderInstanceApiInstanceCleanupModelIdDelete>>>
    
    export type CleanupDefenderInstanceApiInstanceCleanupModelIdDeleteMutationError = HTTPValidationError

    /**
 * @summary 清理防御代理实例
 */
export const useCleanupDefenderInstanceApiInstanceCleanupModelIdDelete = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof cleanupDefenderInstanceApiInstanceCleanupModelIdDelete>>, TError,{modelId: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof cleanupDefenderInstanceApiInstanceCleanupModelIdDelete>>,
        TError,
        {modelId: string},
        TContext
      > => {

      const mutationOptions = getCleanupDefenderInstanceApiInstanceCleanupModelIdDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * 根路径
 * @summary Root
 */
export const rootGet = (
    
 signal?: AbortSignal
) => {
      
      
      return defender_agent_api<unknown>(
      {url: `/`, method: 'GET', signal
    },
      );
    }
  

export const getRootGetQueryKey = () => {
    return [`/`] as const;
    }

    
export const getRootGetQueryOptions = <TData = Awaited<ReturnType<typeof rootGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof rootGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getRootGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof rootGet>>> = ({ signal }) => rootGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof rootGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type RootGetQueryResult = NonNullable<Awaited<ReturnType<typeof rootGet>>>
export type RootGetQueryError = unknown


export function useRootGet<TData = Awaited<ReturnType<typeof rootGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof rootGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof rootGet>>,
          TError,
          Awaited<ReturnType<typeof rootGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useRootGet<TData = Awaited<ReturnType<typeof rootGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof rootGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof rootGet>>,
          TError,
          Awaited<ReturnType<typeof rootGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useRootGet<TData = Awaited<ReturnType<typeof rootGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof rootGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Root
 */

export function useRootGet<TData = Awaited<ReturnType<typeof rootGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof rootGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getRootGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * 健康检查
 * @summary Health
 */
export const healthHealthGet = (
    
 signal?: AbortSignal
) => {
      
      
      return defender_agent_api<unknown>(
      {url: `/health`, method: 'GET', signal
    },
      );
    }
  

export const getHealthHealthGetQueryKey = () => {
    return [`/health`] as const;
    }

    
export const getHealthHealthGetQueryOptions = <TData = Awaited<ReturnType<typeof healthHealthGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthHealthGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getHealthHealthGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof healthHealthGet>>> = ({ signal }) => healthHealthGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof healthHealthGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type HealthHealthGetQueryResult = NonNullable<Awaited<ReturnType<typeof healthHealthGet>>>
export type HealthHealthGetQueryError = unknown


export function useHealthHealthGet<TData = Awaited<ReturnType<typeof healthHealthGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthHealthGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof healthHealthGet>>,
          TError,
          Awaited<ReturnType<typeof healthHealthGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useHealthHealthGet<TData = Awaited<ReturnType<typeof healthHealthGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthHealthGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof healthHealthGet>>,
          TError,
          Awaited<ReturnType<typeof healthHealthGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useHealthHealthGet<TData = Awaited<ReturnType<typeof healthHealthGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthHealthGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Health
 */

export function useHealthHealthGet<TData = Awaited<ReturnType<typeof healthHealthGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthHealthGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getHealthHealthGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}
