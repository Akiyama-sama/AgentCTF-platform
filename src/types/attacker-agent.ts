/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Agent Attacker API
 * ÁΩëÁªúÂÆâÂÖ®Ê∏óÈÄèÊµãËØïAgent API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import { attacker_agent_api } from '../utils/attacker-agent-api';
/**
 * ÂìçÂ∫îÊï∞ÊçÆ
 */
export type ApiResponseUserCleanupResponseData = UserCleanupResponse | null;

export interface ApiResponseUserCleanupResponse {
  /** ‰∏öÂä°Áä∂ÊÄÅÁ†ÅÔºåÈùûHTTPÁä∂ÊÄÅÁ†Å */
  code?: number;
  /** ÂìçÂ∫îÊ∂àÊÅØ */
  message?: string;
  /** ÂìçÂ∫îÊï∞ÊçÆ */
  data?: ApiResponseUserCleanupResponseData;
}

/**
 * ÂìçÂ∫îÊï∞ÊçÆ
 */
export type ApiResponseUserInitResponseData = UserInitResponse | null;

export interface ApiResponseUserInitResponse {
  /** ‰∏öÂä°Áä∂ÊÄÅÁ†ÅÔºåÈùûHTTPÁä∂ÊÄÅÁ†Å */
  code?: number;
  /** ÂìçÂ∫îÊ∂àÊÅØ */
  message?: string;
  /** ÂìçÂ∫îÊï∞ÊçÆ */
  data?: ApiResponseUserInitResponseData;
}

/**
 * ÂìçÂ∫îÊï∞ÊçÆ
 */
export type ApiResponseUserStatusResponseData = UserStatusResponse | null;

export interface ApiResponseUserStatusResponse {
  /** ‰∏öÂä°Áä∂ÊÄÅÁ†ÅÔºåÈùûHTTPÁä∂ÊÄÅÁ†Å */
  code?: number;
  /** ÂìçÂ∫îÊ∂àÊÅØ */
  message?: string;
  /** ÂìçÂ∫îÊï∞ÊçÆ */
  data?: ApiResponseUserStatusResponseData;
}

export type ChatRequestCustomInfoAnyOf = { [key: string]: unknown };

/**
 * Áî®Êà∑Ëá™ÂÆö‰πâ‰ø°ÊÅØÔºåÂâçÁ´ØÂèØËá™Ë°åÂ°´ÂÜô‰ªªÊÑèÈîÆÂÄºÂØπ
 */
export type ChatRequestCustomInfo = ChatRequestCustomInfoAnyOf | null;

export interface ChatRequest {
  /** Áî®Êà∑ID */
  user_id: string;
  /** Ê∂àÊÅØÂÜÖÂÆπ */
  message: string;
  /** Áî®Êà∑Ëá™ÂÆö‰πâ‰ø°ÊÅØÔºåÂâçÁ´ØÂèØËá™Ë°åÂ°´ÂÜô‰ªªÊÑèÈîÆÂÄºÂØπ */
  custom_info?: ChatRequestCustomInfo;
}

export interface HTTPValidationError {
  detail?: ValidationError[];
}

export interface LogRequest {
  /** Áî®Êà∑ID */
  user_id: string;
}

export interface UserCleanupResponse {
  /** Áî®Êà∑ID */
  user_id: string;
  /** Ê∏ÖÁêÜÁä∂ÊÄÅ */
  status: string;
  /** Ê∏ÖÁêÜÊó∂Èó¥ */
  cleaned_at: string;
}

export interface UserInitRequest {
  /** Áî®Êà∑ID */
  user_id: string;
  /** APIÂØÜÈí• */
  api_key: string;
}

export interface UserInitResponse {
  /** Áî®Êà∑ID */
  user_id: string;
  /** ÂàùÂßãÂåñÁä∂ÊÄÅ */
  status: string;
  /** ÂàõÂª∫Êó∂Èó¥ */
  created_at: string;
}

/**
 * ÊúÄÂêéÊ¥ªÂä®Êó∂Èó¥
 */
export type UserStatusResponseLastActivity = string | null;

export interface UserStatusResponse {
  /** Áî®Êà∑ID */
  user_id: string;
  /** ÊòØÂê¶Â∑≤ÂàùÂßãÂåñ */
  initialized: boolean;
  /** ÊúÄÂêéÊ¥ªÂä®Êó∂Èó¥ */
  last_activity?: UserStatusResponseLastActivity;
}

export type ValidationErrorLocItem = string | number;

export interface ValidationError {
  loc: ValidationErrorLocItem[];
  msg: string;
  type: string;
}

export type GetUserStatusV1UserStatusGetParams = {
/**
 * Áî®Êà∑ID
 */
user_id: string;
};

export type CleanupUserV1UserCleanupDeleteParams = {
/**
 * Áî®Êà∑ID
 */
user_id: string;
};

/**
 * ‰∏∫Áî®Êà∑ÂàÜÈÖçÁã¨Á´ãÁöÑAgentËµÑÊ∫êÂπ∂ÂàùÂßãÂåñ‰ºöËØù
 * @summary ÂàùÂßãÂåñÁî®Êà∑‰ºöËØù
 */
export const initUserV1UserInitPost = (
    userInitRequest: UserInitRequest,
 signal?: AbortSignal
) => {
      
      
      return attacker_agent_api<ApiResponseUserInitResponse>(
      {url: `/v1/user/init`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: userInitRequest, signal
    },
      );
    }
  


export const getInitUserV1UserInitPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof initUserV1UserInitPost>>, TError,{data: UserInitRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof initUserV1UserInitPost>>, TError,{data: UserInitRequest}, TContext> => {

const mutationKey = ['initUserV1UserInitPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof initUserV1UserInitPost>>, {data: UserInitRequest}> = (props) => {
          const {data} = props ?? {};

          return  initUserV1UserInitPost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type InitUserV1UserInitPostMutationResult = NonNullable<Awaited<ReturnType<typeof initUserV1UserInitPost>>>
    export type InitUserV1UserInitPostMutationBody = UserInitRequest
    export type InitUserV1UserInitPostMutationError = HTTPValidationError

    /**
 * @summary ÂàùÂßãÂåñÁî®Êà∑‰ºöËØù
 */
export const useInitUserV1UserInitPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof initUserV1UserInitPost>>, TError,{data: UserInitRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof initUserV1UserInitPost>>,
        TError,
        {data: UserInitRequest},
        TContext
      > => {

      const mutationOptions = getInitUserV1UserInitPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Ê£ÄÊü•ÊåáÂÆöÁî®Êà∑ÁöÑAgent‰ºöËØùÊòØÂê¶Â∑≤ÂàùÂßãÂåñ
 * @summary Ê£ÄÊü•Áî®Êà∑‰ºöËØùÁä∂ÊÄÅ
 */
export const getUserStatusV1UserStatusGet = (
    params: GetUserStatusV1UserStatusGetParams,
 signal?: AbortSignal
) => {
      
      
      return attacker_agent_api<ApiResponseUserStatusResponse>(
      {url: `/v1/user/status`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetUserStatusV1UserStatusGetQueryKey = (params: GetUserStatusV1UserStatusGetParams,) => {
    return [`/v1/user/status`, ...(params ? [params]: [])] as const;
    }

    
export const getGetUserStatusV1UserStatusGetQueryOptions = <TData = Awaited<ReturnType<typeof getUserStatusV1UserStatusGet>>, TError = HTTPValidationError>(params: GetUserStatusV1UserStatusGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserStatusV1UserStatusGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserStatusV1UserStatusGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserStatusV1UserStatusGet>>> = ({ signal }) => getUserStatusV1UserStatusGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserStatusV1UserStatusGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUserStatusV1UserStatusGetQueryResult = NonNullable<Awaited<ReturnType<typeof getUserStatusV1UserStatusGet>>>
export type GetUserStatusV1UserStatusGetQueryError = HTTPValidationError


export function useGetUserStatusV1UserStatusGet<TData = Awaited<ReturnType<typeof getUserStatusV1UserStatusGet>>, TError = HTTPValidationError>(
 params: GetUserStatusV1UserStatusGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserStatusV1UserStatusGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserStatusV1UserStatusGet>>,
          TError,
          Awaited<ReturnType<typeof getUserStatusV1UserStatusGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserStatusV1UserStatusGet<TData = Awaited<ReturnType<typeof getUserStatusV1UserStatusGet>>, TError = HTTPValidationError>(
 params: GetUserStatusV1UserStatusGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserStatusV1UserStatusGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserStatusV1UserStatusGet>>,
          TError,
          Awaited<ReturnType<typeof getUserStatusV1UserStatusGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserStatusV1UserStatusGet<TData = Awaited<ReturnType<typeof getUserStatusV1UserStatusGet>>, TError = HTTPValidationError>(
 params: GetUserStatusV1UserStatusGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserStatusV1UserStatusGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Ê£ÄÊü•Áî®Êà∑‰ºöËØùÁä∂ÊÄÅ
 */

export function useGetUserStatusV1UserStatusGet<TData = Awaited<ReturnType<typeof getUserStatusV1UserStatusGet>>, TError = HTTPValidationError>(
 params: GetUserStatusV1UserStatusGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserStatusV1UserStatusGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserStatusV1UserStatusGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Ê∏ÖÁêÜÊåáÂÆöÁî®Êà∑ÁöÑ‰ºöËØùËµÑÊ∫êÔºåÈáäÊîæAgentÂÆû‰æã
 * @summary Ê∏ÖÁêÜÁî®Êà∑‰ºöËØùËµÑÊ∫ê
 */
export const cleanupUserV1UserCleanupDelete = (
    params: CleanupUserV1UserCleanupDeleteParams,
 ) => {
      
      
      return attacker_agent_api<ApiResponseUserCleanupResponse>(
      {url: `/v1/user/cleanup`, method: 'DELETE',
        params
    },
      );
    }
  


export const getCleanupUserV1UserCleanupDeleteMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof cleanupUserV1UserCleanupDelete>>, TError,{params: CleanupUserV1UserCleanupDeleteParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof cleanupUserV1UserCleanupDelete>>, TError,{params: CleanupUserV1UserCleanupDeleteParams}, TContext> => {

const mutationKey = ['cleanupUserV1UserCleanupDelete'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof cleanupUserV1UserCleanupDelete>>, {params: CleanupUserV1UserCleanupDeleteParams}> = (props) => {
          const {params} = props ?? {};

          return  cleanupUserV1UserCleanupDelete(params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CleanupUserV1UserCleanupDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof cleanupUserV1UserCleanupDelete>>>
    
    export type CleanupUserV1UserCleanupDeleteMutationError = HTTPValidationError

    /**
 * @summary Ê∏ÖÁêÜÁî®Êà∑‰ºöËØùËµÑÊ∫ê
 */
export const useCleanupUserV1UserCleanupDelete = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof cleanupUserV1UserCleanupDelete>>, TError,{params: CleanupUserV1UserCleanupDeleteParams}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof cleanupUserV1UserCleanupDelete>>,
        TError,
        {params: CleanupUserV1UserCleanupDeleteParams},
        TContext
      > => {

      const mutationOptions = getCleanupUserV1UserCleanupDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * ÂèëÈÄÅÊ∂àÊÅØÁªôÊåáÂÆöÁî®Êà∑ÁöÑAgentÂπ∂Ëé∑ÂèñÊµÅÂºèÂìçÂ∫îÔºåÁ¨¶ÂêàServer-Sent EventsÊ†áÂáÜ
 * @summary ÂèëÈÄÅÊ∂àÊÅØÁªôÊåáÂÆöÁî®Êà∑ÁöÑAgent
 */
export const chatCompletionsV1ChatCompletionsPost = (
    chatRequest: ChatRequest,
 signal?: AbortSignal
) => {
      
      
      return attacker_agent_api<unknown>(
      {url: `/v1/chat/completions`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: chatRequest, signal
    },
      );
    }
  


export const getChatCompletionsV1ChatCompletionsPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof chatCompletionsV1ChatCompletionsPost>>, TError,{data: ChatRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof chatCompletionsV1ChatCompletionsPost>>, TError,{data: ChatRequest}, TContext> => {

const mutationKey = ['chatCompletionsV1ChatCompletionsPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof chatCompletionsV1ChatCompletionsPost>>, {data: ChatRequest}> = (props) => {
          const {data} = props ?? {};

          return  chatCompletionsV1ChatCompletionsPost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ChatCompletionsV1ChatCompletionsPostMutationResult = NonNullable<Awaited<ReturnType<typeof chatCompletionsV1ChatCompletionsPost>>>
    export type ChatCompletionsV1ChatCompletionsPostMutationBody = ChatRequest
    export type ChatCompletionsV1ChatCompletionsPostMutationError = HTTPValidationError

    /**
 * @summary ÂèëÈÄÅÊ∂àÊÅØÁªôÊåáÂÆöÁî®Êà∑ÁöÑAgent
 */
export const useChatCompletionsV1ChatCompletionsPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof chatCompletionsV1ChatCompletionsPost>>, TError,{data: ChatRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof chatCompletionsV1ChatCompletionsPost>>,
        TError,
        {data: ChatRequest},
        TContext
      > => {

      const mutationOptions = getChatCompletionsV1ChatCompletionsPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Ëé∑ÂèñÊåáÂÆöÁî®Êà∑ÁöÑÊó•Âøó‰ø°ÊÅØÂπ∂ËøîÂõûÊµÅÂºèÂìçÂ∫îÔºåÁ¨¶ÂêàServer-Sent EventsÊ†áÂáÜ
 * @summary Ëé∑ÂèñÊåáÂÆöÁî®Êà∑ÁöÑÊó•Âøó‰ø°ÊÅØ
 */
export const getUserLogsV1LogsLogCompletionsPost = (
    logRequest: LogRequest,
 signal?: AbortSignal
) => {
      
      
      return attacker_agent_api<unknown>(
      {url: `/v1/logs/log/completions`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: logRequest, signal
    },
      );
    }
  


export const getGetUserLogsV1LogsLogCompletionsPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getUserLogsV1LogsLogCompletionsPost>>, TError,{data: LogRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof getUserLogsV1LogsLogCompletionsPost>>, TError,{data: LogRequest}, TContext> => {

const mutationKey = ['getUserLogsV1LogsLogCompletionsPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof getUserLogsV1LogsLogCompletionsPost>>, {data: LogRequest}> = (props) => {
          const {data} = props ?? {};

          return  getUserLogsV1LogsLogCompletionsPost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type GetUserLogsV1LogsLogCompletionsPostMutationResult = NonNullable<Awaited<ReturnType<typeof getUserLogsV1LogsLogCompletionsPost>>>
    export type GetUserLogsV1LogsLogCompletionsPostMutationBody = LogRequest
    export type GetUserLogsV1LogsLogCompletionsPostMutationError = HTTPValidationError

    /**
 * @summary Ëé∑ÂèñÊåáÂÆöÁî®Êà∑ÁöÑÊó•Âøó‰ø°ÊÅØ
 */
export const useGetUserLogsV1LogsLogCompletionsPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getUserLogsV1LogsLogCompletionsPost>>, TError,{data: LogRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof getUserLogsV1LogsLogCompletionsPost>>,
        TError,
        {data: LogRequest},
        TContext
      > => {

      const mutationOptions = getGetUserLogsV1LogsLogCompletionsPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Ê†πË∑ØÂæÑ
 * @summary Root
 */
export const rootGet = (
    
 signal?: AbortSignal
) => {
      
      
      return attacker_agent_api<unknown>(
      {url: `/`, method: 'GET', signal
    },
      );
    }
  

export const getRootGetQueryKey = () => {
    return [`/`] as const;
    }

    
export const getRootGetQueryOptions = <TData = Awaited<ReturnType<typeof rootGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof rootGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getRootGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof rootGet>>> = ({ signal }) => rootGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof rootGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type RootGetQueryResult = NonNullable<Awaited<ReturnType<typeof rootGet>>>
export type RootGetQueryError = unknown


export function useRootGet<TData = Awaited<ReturnType<typeof rootGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof rootGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof rootGet>>,
          TError,
          Awaited<ReturnType<typeof rootGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useRootGet<TData = Awaited<ReturnType<typeof rootGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof rootGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof rootGet>>,
          TError,
          Awaited<ReturnType<typeof rootGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useRootGet<TData = Awaited<ReturnType<typeof rootGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof rootGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Root
 */

export function useRootGet<TData = Awaited<ReturnType<typeof rootGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof rootGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getRootGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * ÂÅ•Â∫∑Ê£ÄÊü•
 * @summary Health
 */
export const healthHealthGet = (
    
 signal?: AbortSignal
) => {
      
      
      return attacker_agent_api<unknown>(
      {url: `/health`, method: 'GET', signal
    },
      );
    }
  

export const getHealthHealthGetQueryKey = () => {
    return [`/health`] as const;
    }

    
export const getHealthHealthGetQueryOptions = <TData = Awaited<ReturnType<typeof healthHealthGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthHealthGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getHealthHealthGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof healthHealthGet>>> = ({ signal }) => healthHealthGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof healthHealthGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type HealthHealthGetQueryResult = NonNullable<Awaited<ReturnType<typeof healthHealthGet>>>
export type HealthHealthGetQueryError = unknown


export function useHealthHealthGet<TData = Awaited<ReturnType<typeof healthHealthGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthHealthGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof healthHealthGet>>,
          TError,
          Awaited<ReturnType<typeof healthHealthGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useHealthHealthGet<TData = Awaited<ReturnType<typeof healthHealthGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthHealthGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof healthHealthGet>>,
          TError,
          Awaited<ReturnType<typeof healthHealthGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useHealthHealthGet<TData = Awaited<ReturnType<typeof healthHealthGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthHealthGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Health
 */

export function useHealthHealthGet<TData = Awaited<ReturnType<typeof healthHealthGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthHealthGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getHealthHealthGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}
