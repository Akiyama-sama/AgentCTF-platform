---
description: 
globs: 
alwaysApply: true
---
# 项目技术栈分析

本文档旨在深入分析并记录本项目的核心技术栈、框架和库。

## 整体架构

本项目采用基于 **React** 的现代化前端架构，使用 **Vite** 作为构建工具，并全面拥抱 **TypeScript** 以增强代码的健壮性和可维护性。项目结构清晰，通过 `src` 目录下的功能模块划分（如 `components`, `routes`, `stores`, `features`）体现了组件化和关注点分离的设计思想。

## 核心技术栈

### 1. 框架与构建

-   **React**: `^19.1.0` - 用于构建用户界面的核心 JavaScript 库。
-   **Vite**: `^7.0.0` - 下一代前端构建工具，提供极速的开发服务器和优化的构建输出。
-   **TypeScript**: `~5.8.3` - 为 JavaScript 添加了类型系统，增强了代码质量和开发效率。

### 2. 路由

-   **TanStack Router**: `^1.121.34` - 一个为 React 设计的、功能强大且完全类型安全的路由库，支持文件式路由。

### 3. 状态管理

-   **Zustand**: `^5.0.5` - 轻量、快速的客户端状态管理库，API 简洁直观。
-   **TanStack Query (React Query)**: `^5.81.2` - 强大的服务端状态管理库，用于处理数据获取、缓存、同步和更新。

### 4. UI & 样式

-   **Tailwind CSS**: `^4.1.10` - 一个功能类优先的 CSS 框架，用于快速、高效地构建自定义设计。
-   **shadcn/ui**: 通过以下库推断，本项目使用了 `shadcn/ui` 的设计理念和组件：
    -   `@radix-ui/*`: 一系列高质量、无样式的底层 UI 组件库，提供了可访问性的基础。
    -   `class-variance-authority`: 用于创建可变的组件样式。
    -   `clsx` & `tailwind-merge`: 用于智能地合并和管理 CSS 类名。
-   **Icons**:
    -   `lucide-react`: `^0.523.0` - 一套简洁、像素完美的图标库。
    -   `@tabler/icons-react`: `^3.34.0` - 另一套优秀的开源图标库。

### 5. 表单处理

-   **React Hook Form**: `^7.58.1` - 高性能、灵活且易于使用的表单库。
-   **Zod**: `^3.25.67` - 基于 TypeScript 的模式声明和验证库，常与 React Hook Form 结合使用。

### 6. 数据可视化与表格

-   **Recharts**: `^3.0.0` - 一个使用 React 和 D3 构建的组合式图表库。
-   **TanStack Table**: `^8.21.3` - 一个功能强大的无头 UI 库，用于构建复杂的数据表格和数据网格。

### 7. 用户认证

-   **Clerk**: `^5.32.1` - 提供了一套完整的用户认证和管理解决方案，包括登录、注册、会话管理等。

### 8. 数据请求

-   **Axios**: `^1.10.0` - 一个流行的、基于 Promise 的 HTTP 客户端，用于浏览器和 Node.js 环境。

### 9. 工具与代码质量

-   **ESLint**: `^9.29.0` - 可插拔的 JavaScript 和 TypeScript 代码检查工具。
-   **Prettier**: `^3.6.0` - 一个固执己见的代码格式化工具，保证团队代码风格一致。
-   **Knip**: `^5.61.2` - 用于检测项目中未使用的文件、导出和依赖项，帮助项目瘦身。
